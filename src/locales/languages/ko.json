{
    "home": {
        "description1": "React 애플리케이션을 생성하기 위한 최소한의 설정을 제공합니다.",
        "description2": "Emotion으로 스타일링된 공통 컴포넌트들이 구축되어 있습니다.",
        "start": "시작하기"
    },
    "guide": {
        "installation-description": "RE Starter 기반으로 프로젝트를 시작하려면 터미널에서 다음 명령을 실행하세요.",
        "stack-share-description": "- 베이스: React, TypeScript\n- 스타일링: Emotion\n- 상태 관리: Recoil, Tanstack-Query\n- 빌드 툴: Vite\n",
        "features-description": "- 공통 컴포넌트를 제공합니다.\n- 다크 모드 / 라이트 모드를 제공합니다.\n- 반응형 디자인을 지원합니다.\n- 다국어를 지원합니다.",
        "roadmap-description": "공통 컴포넌트를 보다 쉽게 확인할 수 있게 Storybook이 적용될 예정입니다.\nSSR을 위한 Next.js 기반의 보일러플레이트가 별도로 개발될 예정입니다.\n더 많은 공통 컴포넌트가 추가될 예정입니다. (ex. Accordion, Toast)\n공통 컴포넌트들이 별도의 라이브러리로 분리될 예정입니다."
    },
    "color-palette": {
        "description": "기본 색상을 선택하여 사용하거나, 원하는 색상을 추가하여 사용할 수 있습니다.",
        "default-color-description": "템플릿에 내장된 기본 색상은 다음과 같습니다.",
        "customization-description": "원하는 색상을 직접 추가하여 사용하는 방법도 있습니다.",
        "customization-guide1": "global.ts 파일의 globlStyle 내에 css variable을 통해 전역 변수로 선언합니다.\nglobalStyle은 @emotion/react의 Global을 통해 애플리케이션 전역에 적용되는 스타일입니다.",
        "customization-guide2": "선언한 변수를 각종 컴포넌트에서 사용하기 위해 token.ts 파일의 Colors에 매칭합니다.",
        "customization-guide3": "Colors 토큰은 공통 컴포넌트의 background, border, color 속성에 사용될 수 있습니다."
    },
    "dark-mode": {
        "description": "RE Starter는 라이트 모드와 다크 모드의 2가지 색상 환경을 제공합니다.",
        "default-mode-description": "처음 방문시 사용자의 OS 설정에 따라 모드가 선택되며, 설정 값이 없는 경우에는 다크 모드가 적용됩니다.\n웹사이트가 열려 있는 동안 사용자가 설정을 변경하면, 웹사이트는 이를 반영하여 색상 모드를 변경합니다.",
        "toggling-mode-description": "useTheme 훅을 사용하여 현재 모드를 확인하거나, 다른 모드로 토글할 수 있습니다.\ntheme은 전역 변수가 아니라서 다른 컴포넌트에서의 변경사항이 전달되지 않습니다.\n따라서 오직 하나의 토글 버튼을 표시하기 위해서만 사용해야 합니다.",
        "usage-description": "라이트 모드와 다크 모드의 색상은 CSS variable을 통해 제공됩니다.",
        "usage-guide1": "global.ts 파일의 globalStyle에 각각의 모드에서 적용할 변수를 정의합니다.",
        "usage-guide2": "globalStyle은 @emotion/react의 Global을 통해 애플리케이션 전역에 적용되는 스타일입니다.",
        "usage-guide3": "선언한 변수를 각종 컴포넌트에서 사용하기 위해 token.ts 파일의 Colors에 매칭합니다.",
        "usage-guide4": "Colors 토큰에 선언한 색상을 컴포넌트에서 사용하면 현재 색상 모드에 맞는 색이 적용됩니다."
    },
    "design-token": {
        "description": "token.ts 파일에 미리 정의된 토큰을 사용하여 css 속성을 쉽고 편리하게 변경할 수 있습니다.",
        "font-token-description": "font-size와 font-weight에 사용되는 토큰으로 normal과 400이 기본 값으로 적용됩니다.",
        "size-token-description": "width, min-width, max-width, height, min-height, max-height에 사용되는 토큰입니다.",
        "color-token-description": "background-color, border-color, color에 사용되는 토큰입니다. 글자 색상은 text-color가 기본 값으로 적용됩니다."
    },
    "button": {
        "description": "Button 컴포넌트는 액션이나 이벤트를 트리거하는 데 사용됩니다.",
        "import-code": "import { Button } from '@components/shared';",
        "usage-code": "<Button background='primary' border='white'>Button</Button>",
        "props-description": "Button 컴포넌트는 <button />의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "input": {
        "description": "Input 컴포넌트는 사용자가 텍스트를 입력하고 편집하는 데 사용됩니다.",
        "import-code": "import { Input } from '@components/shared';",
        "usage-code": "<Input placeholder='텍스트를 입력하세요' />",
        "props-description": "Input 컴포넌트는 <input />의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "select": {
        "description": "Selct 컴포넌트는 Option 컴포넌트와 함께 사용자가 여러 개의 옵션 중에서 하나를 선택하는 데 사용됩니다.",
        "import-code": "import { Select, Option } from '@components/shared';",
        "usage-code": "<Select name={NAMES[selected]} maxHeight={180}>\n\t<Option height={32} selecteed={NAMES[selected]} values={NAMES} onSelect={selectName} />\n</Select>",
        "props-description": "Select 컴포넌트와 Option 컴포넌트에는 다음과 같은 props가 적용됩니다."
    },
    "textarea": {
        "description": "Textarea 컴포넌트는 사용자가 여러 줄의 텍스트를 입력하고 편집하는 데 사용됩니다.",
        "import-code": "import { Textarea } from '@components/shared';",
        "usage-code": "<Textarea minWidth='full' radius={4} rows={3} />",
        "props-description": "Textarea 컴포넌트는 <textarea />의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "text-field": {
        "description": "TextField 컴포넌트는 사용자가 텍스트를 입력하고 편집하는 데 사용됩니다.",
        "import-code": "import { TextField } from '@components/shared';",
        "usage-code": "<TextField as='underlined' placeholder='텍스트' value={text} onChange={inputText} />",
        "props-description": "Textfield 컴포넌트는 <input />의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "box": {
        "description": "Box 컴포넌트는 특정 형식의 레이아웃을 만들 때 사용됩니다.",
        "import-code": "import { Box } from '@components/shared';",
        "usage-code": "<Box as='div' background='green' width='full' height='full' />",
        "props-description": "Box 컴포넌트는 as의 값과 동일한 태그의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "flex": {
        "description": "Felx 컴포넌트는 가로나 세로 방향으로 아이템들을 배열하는 데 사용됩니다.",
        "import-code": "import { Flex } from '@components/shared';",
        "usage-code": "<Flex gap={20}>\n\t<Text>Item1</Text>\n\t<Text>Item2</Text>\n\t<Text>Item3</Text>\n</Flex>",
        "props-description": "Flex 컴포넌트는 <div/>의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "grid": {
        "description": "Grid 컴포넌트는 바둑판 형태로 아이템을 배열하는 데 사용됩니다.",
        "import-code": "import { Grid } from '@components/shared';",
        "usage-code": "<Grid columns='repeat(2, 200px)' rows='repeat(2, 200px)' placeItems='center'>\n\t<Text>Item1</Text>\n\t<Text>Item2</Text>\n\t<Text>Item3</Text>\n\t<Text>Item4</Text>\n</Grid>",
        "props-description": "Grid 컴포넌트는 <div/>의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "modal": {
        "description": "Modal 컴포넌트는 독립된 레이아웃을 팝업 방식으로 보여주는 데 사용됩니다.",
        "import-code": "import { Modal } from '@components/modal';",
        "usage-code": "const { openModal, closeModal, showModal } = useModal();\n<Button onClick={()=>openModal('example-modal')}>Modal 열기</Button>\n{ showModal('example-modal') && <ExampleModal onClose={() => closeModal('example-modal')} /> }\n\n// ExampleModal 내부 구현\n<Modal\n\tbackground='white'\n\tmodalId='example-modal'\n\tonClose={onClose}\n\tradius={8}\n>\n\t<Text>Example Modal</Text>\n</Modal>",
        "props-description": "Modal 컴포넌트는 Flex 컴포넌트의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "slide-modal": {
        "description": "SlideModal 컴포넌트는 독립된 레이아웃을 슬라이드 방식으로 보여주는 데 사용됩니다.",
        "import-code": "import { SlideModal } from '@components/modal';",
        "usage-code": "const { openModal, closeModal, showModal } = useModal();\n<Button onClick={()=>openModal('example2-modal')}>Modal 열기</Button>\n{ showModal('example2-modal') && <Example2Modal onClose={() => closeModal('example2-modal')} /> }\n\n// Example2Modal 내부 구현\n<SlideModal\n\tbackground='background'\n\tdistance={300}\n\tmodalId='example2-modal'\n\tonClose={onClose}\n\tposition='right'\n\twidth={300}\n>\n\t<Text>Example2 Modal</Text>\n</SlideModal>",
        "props-description": "Modal 컴포넌트는 Flex 컴포넌트의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "image": {
        "description": "Image 컴포넌트는 이미지 파일을 보여주는 데 사용됩니다.",
        "import-code": "import { Image } from '@components/shared';",
        "usage-code": "<Image src='/src/assets/icons/vite.svg' alt='Vite 로고' />",
        "props-description": "Image 컴포넌트는 <img/>의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "icon": {
        "description": "Icon 컴포넌트는 svg 형식의 아이콘을 보여주는 데 사용됩니다.",
        "import-code": "import { Icon } from '@components/shared';",
        "usage-code": "<Icon name='menu' size={16} color='icon-color' />",
        "props-description": "Icon 컴포넌트는 <img/>의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "svg": {
        "description": "Svg 컴포넌트는 svg 이미지를 파일이 아닌 코드 형식으로 관리하는 데 사용됩니다.",
        "import-code": "import { Svg } from '@components/shared';",
        "usage-code": "<Svg width={16} height={16}>\n\t<path\n\t   clipRule='evenodd'\n\t   d='M5.53 4.47a.75.75 0 00-1.06 1.06L10.94 12l-6.47 6.47a.75.75 0 101.06 1.06L12 13.06l6.47 6.47a.75.75 0 101.06-1.06L13.06 12l6.47-6.47a.75.75 0 00-1.06-1.06L12 10.94 5.53 4.47z'\n\t   fillRule='evenodd'\n\t/>\n</Svg>",
        "props-description": "Svg 컴포넌트는 <svg/>의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "link": {
        "description": "Link 컴포넌트는 외부 사이트로 이동하는 데 사용됩니다.",
        "import-code": "import { Link } from '@components/shared';",
        "usage-code": "<Link href='https://github.com/one-chance'>Github</Link>",
        "props-description": "Link 컴포넌트는 <a/>의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "navlink": {
        "description": "NavLink 컴포넌트는 사이트 내부의 다른 페이지로 이동하는 데 사용됩니다.",
        "import-code": "import { NavLink } from '@components/shared';",
        "usage-code": "<NavLink to='/'>홈으로</NavLink>",
        "props-description": "NavLink 컴포넌트는 react-router-dom의 <Link/>의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "pagination": {
        "description": "Pagination 컴포넌트는 데이터 리스트에서 페이지를 이동하는 데 사용됩니다.",
        "import-code": "import { Pagination } from '@components/shared';",
        "usage-code": "const location = useLocation();\nconst navigate = useNavigate();\nconst [currentPage, setCurrentPage] = useState(1);\n\nuseEffect(() => {\n\tif (component !== 'pagination') return;\n\tconst queryParams = new URLSearchParams(location.search);\n\tconst page = parseInt(queryParams.get('page') || '1', 10);\n\n\tif (isNaN(page) || page <= 0) {\n\t  queryParams.set('page', '1');\n\t  navigate(`?${queryParams.toString()}`);\n\t} else {\n\t  setCurrentPage(page);\n\t}\n}, [location, navigate]);\n\nreturn <Pagination currentPage={currentPage} totalPage={10}>;",
        "props-description": "Pagination 컴포넌트는 다음 props들이 적용됩니다."
    },
    "text": {
        "description": "Text 컴포넌트는 텍스트를 표시하는 데 사용됩니다.",
        "import-code": "import { Text } from '@components/shared';",
        "usage-code": "<Text color='text-color' size='large' weight='bold'>텍스트</Text>",
        "props-description": "Text 컴포넌트는 <span/>의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "label": {
        "description": "Label 컴포넌트는 폼 요소에 이름을 붙이는 데 사용됩니다.",
        "import-code": "import { Label } from '@components/shared';",
        "usage-code": "<Label color='text-color' htmlFor='search'>라벨</Label>",
        "props-description": "Label 컴포넌트는 <label/>의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    },
    "heading": {
        "description": "Heading 컴포넌트는 강조할만한 제목을 표시하는 데 사용됩니다.",
        "import-code": "import { Heading } from '@components/shared';",
        "usage-code": "<Heading as='h2' color='text-color'>제목</Heading>",
        "props-description": "Heading 컴포넌트는 <h1/>의 기본 속성을 모두 포함하며, 다음 props들이 적용됩니다."
    }
}